cmake_minimum_required(VERSION 3.30)
project(nostrc-tests C)

# Optional fuzzing support
option(ENABLE_FUZZING "Build fuzzing targets" OFF)
option(ENABLE_FUZZING_RUNTIME "Link libFuzzer runtime (requires Clang libclang_rt.fuzzer)" OFF)

# Unit/integration test binaries for nostrc. Uses CTest (enabled at the root).

enable_testing()
# Directory-wide fallback timeout (seconds) so no test can run forever
set_property(DIRECTORY PROPERTY TEST_TIMEOUT 90)

# Sanitizer helper (Debug builds)
function(apply_sanitizers target)
  if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    if (GO_ENABLE_TSAN)
      target_compile_options(${target} PRIVATE -fsanitize=thread)
      target_link_options(${target} PRIVATE -fsanitize=thread)
    else()
      if (GO_ENABLE_ASAN)
        target_compile_options(${target} PRIVATE -fsanitize=address)
        target_link_options(${target} PRIVATE -fsanitize=address)
      endif()
      if (GO_ENABLE_UBSAN)
        target_compile_options(${target} PRIVATE -fsanitize=undefined)
        target_link_options(${target} PRIVATE -fsanitize=undefined)
      endif()
    endif()
  endif()
endfunction()

# Find OpenSSL for hashing/crypto used by tests
find_package(OpenSSL REQUIRED)
if (OpenSSL_FOUND)
    message(STATUS "Found OpenSSL version ${OpenSSL_VERSION}")
else()
    message(FATAL_ERROR "OpenSSL not found")
endif()

# Find secp256k1 (assuming pkg-config is available)
find_package(PkgConfig REQUIRED)
pkg_check_modules(SECP256K1 REQUIRED libsecp256k1)
pkg_check_modules(JANSSON REQUIRED IMPORTED_TARGET jansson)
if (SECP256K1_FOUND)
    message(STATUS "Found secp256k1 version ${SECP256K1_VERSION}")
else()
    message(FATAL_ERROR "libsecp256k1 not found")
endif()

# Find the nsync library and headers manually for synchronization primitives
find_library(NSYNC_LIB nsync REQUIRED)
find_path(NSYNC_INCLUDE_DIR nsync.h REQUIRED)

# Include the nsync headers
include_directories(${NSYNC_INCLUDE_DIR})


# Make Jansson available to all test targets
link_libraries(PkgConfig::JANSSON)
include_directories(${JANSSON_INCLUDE_DIRS})
link_directories(${JANSSON_LIBRARY_DIRS})

# Test executables
add_executable(test_nostr tests_nostr.c)

add_executable(test_relay test_relay.c)
add_executable(test_relay_shutdown test_relay_shutdown.c)
add_executable(test_subscription_lifecycle test_subscription_lifecycle.c)
add_executable(test_subscription_backpressure test_subscription_backpressure.c)
add_executable(test_subscription_backpressure_long test_subscription_backpressure_long.c)
add_executable(test_subscription_blocking_depth test_subscription_blocking_depth.c)
add_executable(test_relay_unsubscribe test_relay_unsubscribe.c)
add_executable(test_connection_shutdown_order test_connection_shutdown_order.c)
add_executable(test_envelope_parse test_envelope_parse.c)
add_executable(test_json_event test_json_event.c)
add_executable(test_json_event_fuzzlite test_json_event_fuzzlite.c)
add_executable(test_json_envelope test_json_envelope.c)
add_executable(test_json_filter test_json_filter.c)
add_executable(test_json_filter_tags test_json_filter_tags.c)
add_executable(test_json_filter_robust test_json_filter_robust.c)
add_executable(test_json_filter_fuzzlite test_json_filter_fuzzlite.c)
add_executable(test_json_int_array test_json_int_array.c)
add_executable(test_json_raw test_json_raw.c)
add_executable(test_filters_move_semantics test_filters_move_semantics.c)
add_executable(microbench_json microbench_json.c)
add_executable(test_nip86_policy test_nip86_policy.c)

# Link OpenSSL, libsecp256k1, nsync, and project libraries
target_link_libraries(test_nostr PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})

target_link_libraries(test_relay PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})
target_link_libraries(test_relay_shutdown PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})
target_link_libraries(test_subscription_lifecycle PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})
target_link_libraries(test_subscription_backpressure PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})
target_link_libraries(test_subscription_backpressure_long PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})
target_link_libraries(test_subscription_blocking_depth PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})
target_link_libraries(test_relay_unsubscribe PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})
target_link_libraries(test_connection_shutdown_order PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})
target_link_libraries(test_envelope_parse PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})
target_link_libraries(test_json_event PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})
target_link_libraries(test_json_event_fuzzlite PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})
target_link_libraries(test_json_envelope PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})
target_link_libraries(test_json_filter PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})
target_link_libraries(test_json_filter_tags PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})
target_link_libraries(test_json_filter_robust PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})
target_link_libraries(test_json_filter_fuzzlite PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES} ${JANSSON_LIBRARIES})
target_link_libraries(test_json_int_array PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})
target_link_libraries(test_json_raw PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})
target_link_libraries(test_filters_move_semantics PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})
target_link_libraries(microbench_json PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})
target_link_libraries(test_nip86_policy PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES} nip86)
target_include_directories(test_nip86_policy PRIVATE ${CMAKE_SOURCE_DIR} ${CMAKE_SOURCE_DIR}/nips/nip86/include)

# Apply sanitizers to tests if enabled
apply_sanitizers(test_nostr)
apply_sanitizers(test_relay)
apply_sanitizers(test_relay_shutdown)
apply_sanitizers(test_subscription_lifecycle)
apply_sanitizers(test_subscription_backpressure)
apply_sanitizers(test_subscription_backpressure_long)
apply_sanitizers(test_subscription_blocking_depth)
apply_sanitizers(test_relay_unsubscribe)
apply_sanitizers(test_connection_shutdown_order)
apply_sanitizers(test_envelope_parse)
apply_sanitizers(test_json_event)
apply_sanitizers(test_json_event_fuzzlite)
apply_sanitizers(test_json_envelope)
apply_sanitizers(test_json_filter)
apply_sanitizers(test_json_filter_tags)
apply_sanitizers(test_json_filter_robust)
apply_sanitizers(test_json_filter_fuzzlite)
apply_sanitizers(test_json_int_array)
apply_sanitizers(test_json_raw)
apply_sanitizers(test_filters_move_semantics)
apply_sanitizers(microbench_json)

# Register tests for CTest. Run with: `ctest --output-on-failure`
add_test(NAME test_nostr COMMAND test_nostr)
add_test(NAME test_relay COMMAND test_relay)
add_test(NAME test_relay_shutdown COMMAND test_relay_shutdown)
add_test(NAME test_subscription_lifecycle COMMAND test_subscription_lifecycle)
add_test(NAME test_subscription_backpressure COMMAND test_subscription_backpressure)
add_test(NAME test_subscription_backpressure_long COMMAND test_subscription_backpressure_long)
add_test(NAME test_subscription_blocking_depth COMMAND test_subscription_blocking_depth)
add_test(NAME test_relay_unsubscribe COMMAND test_relay_unsubscribe)
add_test(NAME test_connection_shutdown_order COMMAND test_connection_shutdown_order)
add_test(NAME test_envelope_parse COMMAND test_envelope_parse)
add_test(NAME test_json_event COMMAND test_json_event)
add_test(NAME test_json_event_fuzzlite COMMAND test_json_event_fuzzlite)

# LibFuzzer target for event deserialization (optional)
if(ENABLE_FUZZING)
  if(ENABLE_FUZZING_RUNTIME)
    add_executable(fuzz_event_deserialize fuzz_event_deserialize.c)
    target_link_libraries(fuzz_event_deserialize PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})
    target_include_directories(fuzz_event_deserialize PRIVATE ${SECP256K1_INCLUDE_DIRS})
    target_link_directories(fuzz_event_deserialize PRIVATE ${SECP256K1_LIBRARY_DIRS})
    if (CMAKE_C_COMPILER_ID MATCHES "Clang")
      target_compile_options(fuzz_event_deserialize PRIVATE -fsanitize=fuzzer,address,undefined -fno-omit-frame-pointer)
      target_link_options(fuzz_event_deserialize PRIVATE -fsanitize=fuzzer,address,undefined)
    endif()
    # Run with corpus directory, e.g.:
    #   ./fuzz_event_deserialize ${CMAKE_SOURCE_DIR}/tests/fuzz_seeds/events -runs=0

    add_executable(fuzz_envelope_deserialize fuzz_envelope_deserialize.c)
    target_link_libraries(fuzz_envelope_deserialize PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})
    target_include_directories(fuzz_envelope_deserialize PRIVATE ${SECP256K1_INCLUDE_DIRS})
    target_link_directories(fuzz_envelope_deserialize PRIVATE ${SECP256K1_LIBRARY_DIRS})
    if (CMAKE_C_COMPILER_ID MATCHES "Clang")
      target_compile_options(fuzz_envelope_deserialize PRIVATE -fsanitize=fuzzer,address,undefined -fno-omit-frame-pointer)
      target_link_options(fuzz_envelope_deserialize PRIVATE -fsanitize=fuzzer,address,undefined)
    endif()
    # Run with corpus directory, e.g.:
    #   ./fuzz_envelope_deserialize ${CMAKE_SOURCE_DIR}/tests/fuzz_seeds/filters -runs=0
  else()
    add_executable(fuzz_event_driver fuzz_event_deserialize.c fuzz_driver_main.c)
    target_link_libraries(fuzz_event_driver PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})
    target_include_directories(fuzz_event_driver PRIVATE ${SECP256K1_INCLUDE_DIRS})
    target_link_directories(fuzz_event_driver PRIVATE ${SECP256K1_LIBRARY_DIRS})
    if (CMAKE_C_COMPILER_ID MATCHES "Clang")
      target_compile_options(fuzz_event_driver PRIVATE -fsanitize=address,undefined -fno-omit-frame-pointer)
      target_link_options(fuzz_event_driver PRIVATE -fsanitize=address,undefined)
    endif()
    # Run with a corpus directory or file list, e.g.:
    #   ./fuzz_event_driver ${CMAKE_SOURCE_DIR}/tests/fuzz_seeds/events

    add_executable(fuzz_envelope_driver fuzz_envelope_deserialize.c fuzz_driver_main.c)
    target_link_libraries(fuzz_envelope_driver PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})
    target_include_directories(fuzz_envelope_driver PRIVATE ${SECP256K1_INCLUDE_DIRS})
    target_link_directories(fuzz_envelope_driver PRIVATE ${SECP256K1_LIBRARY_DIRS})
    if (CMAKE_C_COMPILER_ID MATCHES "Clang")
      target_compile_options(fuzz_envelope_driver PRIVATE -fsanitize=address,undefined -fno-omit-frame-pointer)
      target_link_options(fuzz_envelope_driver PRIVATE -fsanitize=address,undefined)
    endif()
    # Run with a corpus directory or file list, e.g.:
    #   ./fuzz_envelope_driver ${CMAKE_SOURCE_DIR}/tests/fuzz_seeds/filters
  endif()
endif()

# Filter parser fuzz harness
if(ENABLE_FUZZING)
  if(ENABLE_FUZZING_RUNTIME)
    add_executable(fuzz_filter_parse fuzz_filter_parse.c)
    target_link_libraries(fuzz_filter_parse PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})
    target_include_directories(fuzz_filter_parse PRIVATE ${SECP256K1_INCLUDE_DIRS})
    target_link_directories(fuzz_filter_parse PRIVATE ${SECP256K1_LIBRARY_DIRS})
    if (CMAKE_C_COMPILER_ID MATCHES "Clang")
      target_compile_options(fuzz_filter_parse PRIVATE -fsanitize=fuzzer,address,undefined -fno-omit-frame-pointer)
      target_link_options(fuzz_filter_parse PRIVATE -fsanitize=fuzzer,address,undefined)
    endif()
  else()
    add_executable(fuzz_filter_parse_driver fuzz_filter_parse.c fuzz_driver_main.c)
    target_link_libraries(fuzz_filter_parse_driver PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})
    target_include_directories(fuzz_filter_parse_driver PRIVATE ${SECP256K1_INCLUDE_DIRS})
    target_link_directories(fuzz_filter_parse_driver PRIVATE ${SECP256K1_LIBRARY_DIRS})
    if (CMAKE_C_COMPILER_ID MATCHES "Clang")
      target_compile_options(fuzz_filter_parse_driver PRIVATE -fsanitize=address,undefined -fno-omit-frame-pointer)
      target_link_options(fuzz_filter_parse_driver PRIVATE -fsanitize=address,undefined)
    endif()
  endif()
endif()

# Verify wrapper fuzz harness
if(ENABLE_FUZZING)
  if(ENABLE_FUZZING_RUNTIME)
    add_executable(fuzz_verify_wrapper fuzz_verify_wrapper.c)
    target_link_libraries(fuzz_verify_wrapper PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})
    target_include_directories(fuzz_verify_wrapper PRIVATE ${SECP256K1_INCLUDE_DIRS})
    target_link_directories(fuzz_verify_wrapper PRIVATE ${SECP256K1_LIBRARY_DIRS})
    if (CMAKE_C_COMPILER_ID MATCHES "Clang")
      target_compile_options(fuzz_verify_wrapper PRIVATE -fsanitize=fuzzer,address,undefined -fno-omit-frame-pointer)
      target_link_options(fuzz_verify_wrapper PRIVATE -fsanitize=fuzzer,address,undefined)
    endif()
  else()
    add_executable(fuzz_verify_wrapper_driver fuzz_verify_wrapper.c fuzz_driver_main.c)
    target_link_libraries(fuzz_verify_wrapper_driver PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})
    target_include_directories(fuzz_verify_wrapper_driver PRIVATE ${SECP256K1_INCLUDE_DIRS})
    target_link_directories(fuzz_verify_wrapper_driver PRIVATE ${SECP256K1_LIBRARY_DIRS})
    if (CMAKE_C_COMPILER_ID MATCHES "Clang")
      target_compile_options(fuzz_verify_wrapper_driver PRIVATE -fsanitize=address,undefined -fno-omit-frame-pointer)
      target_link_options(fuzz_verify_wrapper_driver PRIVATE -fsanitize=address,undefined)
    endif()
  endif()
endif()

# Additional compact-event fuzz harness (libFuzzer runtime recommended)
if(ENABLE_FUZZING)
  if(ENABLE_FUZZING_RUNTIME)
    add_executable(fuzz_event_parse fuzz_event_parse.c)
    target_link_libraries(fuzz_event_parse PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})
    target_include_directories(fuzz_event_parse PRIVATE ${SECP256K1_INCLUDE_DIRS})
    target_link_directories(fuzz_event_parse PRIVATE ${SECP256K1_LIBRARY_DIRS})
    if (CMAKE_C_COMPILER_ID MATCHES "Clang")
      target_compile_options(fuzz_event_parse PRIVATE -fsanitize=fuzzer,address,undefined -fno-omit-frame-pointer)
      target_link_options(fuzz_event_parse PRIVATE -fsanitize=fuzzer,address,undefined)
    endif()
  else()
    add_executable(fuzz_event_parse_driver fuzz_event_parse.c fuzz_driver_main.c)
    target_link_libraries(fuzz_event_parse_driver PRIVATE libnostr ${NSYNC_LIB} nostr_json OpenSSL::SSL OpenSSL::Crypto ${SECP256K1_LIBRARIES})
    target_include_directories(fuzz_event_parse_driver PRIVATE ${SECP256K1_INCLUDE_DIRS})
    target_link_directories(fuzz_event_parse_driver PRIVATE ${SECP256K1_LIBRARY_DIRS})
    if (CMAKE_C_COMPILER_ID MATCHES "Clang")
      target_compile_options(fuzz_event_parse_driver PRIVATE -fsanitize=address,undefined -fno-omit-frame-pointer)
      target_link_options(fuzz_event_parse_driver PRIVATE -fsanitize=address,undefined)
    endif()
  endif()
endif()
add_test(NAME test_json_envelope COMMAND test_json_envelope)
add_test(NAME test_json_filter COMMAND test_json_filter)
add_test(NAME test_json_filter_tags COMMAND test_json_filter_tags)
add_test(NAME test_json_filter_robust COMMAND test_json_filter_robust)
add_test(NAME test_json_filter_fuzzlite COMMAND test_json_filter_fuzzlite)
add_test(NAME test_json_int_array COMMAND test_json_int_array)
add_test(NAME test_json_raw COMMAND test_json_raw)
add_test(NAME test_filters_move_semantics COMMAND test_filters_move_semantics)
add_test(NAME test_nip86_policy COMMAND test_nip86_policy)

# Per-test timeouts (seconds) — keep tight to surface stalls early
set_tests_properties(test_nostr PROPERTIES TIMEOUT 20)
set_tests_properties(test_relay PROPERTIES TIMEOUT 30)
set_tests_properties(test_relay_shutdown PROPERTIES TIMEOUT 30)
set_tests_properties(test_subscription_lifecycle PROPERTIES TIMEOUT 30)
set_tests_properties(test_subscription_backpressure PROPERTIES TIMEOUT 45)
set_tests_properties(test_subscription_backpressure_long PROPERTIES TIMEOUT 90)
set_tests_properties(test_subscription_blocking_depth PROPERTIES TIMEOUT 45)
set_tests_properties(test_relay_unsubscribe PROPERTIES TIMEOUT 30)
set_tests_properties(test_connection_shutdown_order PROPERTIES TIMEOUT 30)
set_tests_properties(test_envelope_parse PROPERTIES TIMEOUT 20)
set_tests_properties(test_json_event PROPERTIES TIMEOUT 20)
set_tests_properties(test_json_event_fuzzlite PROPERTIES TIMEOUT 30)
set_tests_properties(test_json_envelope PROPERTIES TIMEOUT 20)
set_tests_properties(test_json_filter PROPERTIES TIMEOUT 20)
set_tests_properties(test_json_filter_tags PROPERTIES TIMEOUT 20)
set_tests_properties(test_json_filter_robust PROPERTIES TIMEOUT 45)
set_tests_properties(test_json_filter_fuzzlite PROPERTIES TIMEOUT 45)
set_tests_properties(test_json_int_array PROPERTIES TIMEOUT 20)
set_tests_properties(test_json_raw PROPERTIES TIMEOUT 20)
set_tests_properties(test_filters_move_semantics PROPERTIES TIMEOUT 20)

# Include directories for libsecp256k1 headers
target_include_directories(test_nostr PRIVATE ${SECP256K1_INCLUDE_DIRS})
target_include_directories(test_relay PRIVATE ${SECP256K1_INCLUDE_DIRS})
target_include_directories(test_relay_shutdown PRIVATE ${SECP256K1_INCLUDE_DIRS})
target_include_directories(test_subscription_lifecycle PRIVATE ${SECP256K1_INCLUDE_DIRS})
target_include_directories(test_subscription_backpressure PRIVATE ${SECP256K1_INCLUDE_DIRS})
target_include_directories(test_subscription_backpressure_long PRIVATE ${SECP256K1_INCLUDE_DIRS})
target_include_directories(test_subscription_blocking_depth PRIVATE ${SECP256K1_INCLUDE_DIRS})
target_include_directories(test_relay_unsubscribe PRIVATE ${SECP256K1_INCLUDE_DIRS})
target_include_directories(test_connection_shutdown_order PRIVATE ${SECP256K1_INCLUDE_DIRS})
target_include_directories(test_envelope_parse PRIVATE ${SECP256K1_INCLUDE_DIRS})
target_include_directories(test_json_event PRIVATE ${SECP256K1_INCLUDE_DIRS})
target_include_directories(test_json_event_fuzzlite PRIVATE ${SECP256K1_INCLUDE_DIRS})
target_include_directories(test_json_envelope PRIVATE ${SECP256K1_INCLUDE_DIRS})
target_include_directories(test_json_filter PRIVATE ${SECP256K1_INCLUDE_DIRS})
target_include_directories(test_json_filter_tags PRIVATE ${SECP256K1_INCLUDE_DIRS})
target_include_directories(test_json_filter_robust PRIVATE ${SECP256K1_INCLUDE_DIRS})
target_include_directories(test_json_filter_fuzzlite PRIVATE ${SECP256K1_INCLUDE_DIRS} ${JANSSON_INCLUDE_DIRS})
target_include_directories(test_json_int_array PRIVATE ${SECP256K1_INCLUDE_DIRS})
target_include_directories(test_json_raw PRIVATE ${SECP256K1_INCLUDE_DIRS})
target_include_directories(test_filters_move_semantics PRIVATE ${SECP256K1_INCLUDE_DIRS})
target_include_directories(microbench_json PRIVATE ${SECP256K1_INCLUDE_DIRS})

# Link directories for libsecp256k1
target_link_directories(test_nostr PRIVATE ${SECP256K1_LIBRARY_DIRS})
target_link_directories(test_json_filter PRIVATE ${SECP256K1_LIBRARY_DIRS})
target_link_directories(test_json_filter_tags PRIVATE ${SECP256K1_LIBRARY_DIRS})
target_link_directories(test_json_filter_robust PRIVATE ${SECP256K1_LIBRARY_DIRS})
target_link_directories(test_json_filter_fuzzlite PRIVATE ${SECP256K1_LIBRARY_DIRS})
target_link_directories(test_json_int_array PRIVATE ${SECP256K1_LIBRARY_DIRS})
target_link_directories(test_json_raw PRIVATE ${SECP256K1_LIBRARY_DIRS})
target_link_directories(test_filters_move_semantics PRIVATE ${SECP256K1_LIBRARY_DIRS})
target_link_directories(microbench_json PRIVATE ${SECP256K1_LIBRARY_DIRS})
target_link_directories(test_json_envelope PRIVATE ${SECP256K1_LIBRARY_DIRS})
target_link_directories(test_json_event PRIVATE ${SECP256K1_LIBRARY_DIRS})
target_link_directories(test_json_event_fuzzlite PRIVATE ${SECP256K1_LIBRARY_DIRS})
target_link_directories(test_envelope_parse PRIVATE ${SECP256K1_LIBRARY_DIRS})
target_link_directories(test_relay PRIVATE ${SECP256K1_LIBRARY_DIRS})
target_link_directories(test_subscription_lifecycle PRIVATE ${SECP256K1_LIBRARY_DIRS})
target_link_directories(test_subscription_backpressure PRIVATE ${SECP256K1_LIBRARY_DIRS})
target_link_directories(test_subscription_backpressure_long PRIVATE ${SECP256K1_LIBRARY_DIRS})
target_link_directories(test_subscription_blocking_depth PRIVATE ${SECP256K1_LIBRARY_DIRS})
target_link_directories(test_relay_unsubscribe PRIVATE ${SECP256K1_LIBRARY_DIRS})
target_link_directories(test_connection_shutdown_order PRIVATE ${SECP256K1_LIBRARY_DIRS})
target_link_directories(test_relay_shutdown PRIVATE ${SECP256K1_LIBRARY_DIRS})
