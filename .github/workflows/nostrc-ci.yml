name: nostrc CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    name: ${{ matrix.os }} â€¢ ${{ matrix.sanitizer }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        sanitizer: [asan_ubsan]

    env:
      CMAKE_BUILD_TYPE: Debug
      ASAN_OPTIONS: detect_leaks=1:strict_string_checks=1
      UBSAN_OPTIONS: print_stacktrace=1
      TSAN_OPTIONS: halt_on_error=1
      # Keep relay mitigations disabled by default in CI unless tests set them
      NOSTR_RELAY_REPLAY_TTL: "0"
      NOSTR_RELAY_SKEW_FUTURE: "0"
      NOSTR_RELAY_SKEW_PAST: "0"

    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Select clang toolchain (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV

      - name: Install dependencies (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
                                  build-essential cmake ninja-build pkg-config clang \
                                  libjansson-dev libsecp256k1-dev libwebsockets-dev libsodium-dev \
                                  libssl-dev libcurl4-openssl-dev libglib2.0-dev libsoup-3.0-dev
          echo "LDFLAGS='-fuse-ld=lld'" >> $GITHUB_ENV
          sudo apt-get install -y libnsync-dev
          # FlatCC runtime is provided by vendored sources under third_party/nostrdb if
          # system libflatccrt is unavailable. No top-level install is required.

      - name: Install dependencies (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          brew update
          brew upgrade
          brew install ninja pkg-config jansson secp256k1 libwebsockets libsodium openssl@3 libsoup@3 nsync flatcc || true
          # Ensure Homebrew pkg-config paths are visible for scanner and linkage
          echo "PKG_CONFIG_PATH=/opt/homebrew/opt/openssl@3/lib/pkgconfig:/opt/homebrew/opt/libsoup@3/lib/pkgconfig:/opt/homebrew/opt/libwebsockets/lib/pkgconfig:/opt/homebrew/lib/pkgconfig:/opt/homebrew/opt/flatcc/lib/pkgconfig:${PKG_CONFIG_PATH}" >> $GITHUB_ENV
          echo "CPPFLAGS=-I/opt/homebrew/include ${CPPFLAGS}" >> $GITHUB_ENV
          echo "LDFLAGS=-L/opt/homebrew/lib ${LDFLAGS}" >> $GITHUB_ENV

      - name: Override ASAN options (macOS)
        if: startsWith(matrix.os, 'macos')
        run: echo "ASAN_OPTIONS=detect_leaks=0:strict_string_checks=1" >> $GITHUB_ENV

      - name: Configure (sanitizers + ENABLE_NIP19/49 + fuzzers)
        run: |
          case "${{ matrix.sanitizer }}" in
            asan_ubsan)
              cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_VERBOSE_MAKEFILE=ON \
                -DENABLE_NIP19=ON -DENABLE_NIP49=ON \
                -DENABLE_FUZZING=ON -DENABLE_FUZZING_RUNTIME=ON \
                -DGO_ENABLE_ASAN=ON -DGO_ENABLE_UBSAN=ON -DGO_WARNINGS_AS_ERRORS=ON \
                -DWITH_NOSTRDB=ON -DLIBNOSTR_WITH_NOSTRDB=ON \
                -DNIP04_STRICT_AEAD_ONLY=ON
              ;;
            tsan)
              cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_VERBOSE_MAKEFILE=ON \
                -DENABLE_NIP19=ON -DENABLE_NIP49=ON \
                -DGO_ENABLE_TSAN=ON -DGO_WARNINGS_AS_ERRORS=ON \
                -DWITH_NOSTRDB=ON -DLIBNOSTR_WITH_NOSTRDB=ON
              ;;
          esac

      - name: Build (verbose)
        run: cmake --build build -j --verbose

      # TSAN temporarily disabled

      - name: Test
        run: |
          ctest --test-dir build --output-on-failure -j2

      - name: Short fuzz (libFuzzer)
        if: matrix.sanitizer == 'asan_ubsan'
        run: |
          set -e
          # Run each fuzzer briefly to catch obvious issues without stalling CI
          if [ -x build/tests/fuzz_event_deserialize ]; then \
            ./build/tests/fuzz_event_deserialize tests/fuzz_seeds/events -max_total_time=30 || exit 1; \
          fi
          if [ -x build/tests/fuzz_envelope_deserialize ]; then \
            ./build/tests/fuzz_envelope_deserialize tests/fuzz_seeds/filters -max_total_time=30 || exit 1; \
          fi

      - name: Archive logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.sanitizer }}-monorepo-logs
          path: |
            build/Testing/Temporary/*
            build/Testing/*/LastTest.log
            build/CTestTestfile.cmake
          if-no-files-found: ignore
