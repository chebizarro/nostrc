name: libnostr GI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  generate-gir:
    name: ${{ matrix.os }} â€¢ GIR/typelib
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    env:
      CMAKE_BUILD_TYPE: Debug

    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Select clang toolchain (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV

      - name: Install dependencies (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential cmake ninja-build clang git pkg-config \
                                  glib2.0-dev libgirepository1.0-dev gobject-introspection \
                                  libjansson-dev libsecp256k1-dev libwebsockets-dev libcurl4-openssl-dev \
                                  libsoup-3.0-dev libsodium-dev
          # Build nsync from source
          git clone --depth 1 https://github.com/google/nsync.git
          cmake -S nsync -B nsync/build -DCMAKE_BUILD_TYPE=Release
          cmake --build nsync/build -j
          sudo cmake --install nsync/build

      - name: Install dependencies (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          brew update
          brew upgrade
          brew install ninja pkg-config glib gobject-introspection jansson secp256k1 libwebsockets libsodium openssl@3 curl libsoup@3 || true
          if brew info nsync >/dev/null 2>&1; then
            brew install nsync || true
          else
            git clone --depth 1 https://github.com/google/nsync.git
            cmake -S nsync -B nsync/build -DCMAKE_BUILD_TYPE=Release
            cmake --build nsync/build -j
            sudo cmake --install nsync/build
          fi

      - name: Override ASAN options (macOS)
        if: startsWith(matrix.os, 'macos')
        run: echo "ASAN_OPTIONS=detect_leaks=0:strict_string_checks=1" >> $GITHUB_ENV

      - name: Configure (with GLib + nostrdb, no apps)
        run: cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DGO_WARNINGS_AS_ERRORS=ON -DNOSTR_WITH_GLIB=ON -DWITH_NOSTRDB=ON -DBUILD_APPS=OFF

      - name: Build and Install
        run: |
          cmake --build build -j
          sudo cmake --install build --prefix /usr

      - name: Generate GIR via CMake target
        run: |
          cmake --build build --target nostr-gir -j

      - name: Upload GIR artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-gir
          path: build/gir/*
          if-no-files-found: error
