name: libgo CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    name: ${{ matrix.os }} â€¢ ${{ matrix.sanitizer }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        sanitizer: [asan_ubsan, tsan]

    env:
      CMAKE_BUILD_TYPE: Debug
      ASAN_OPTIONS: detect_leaks=1:strict_string_checks=1
      UBSAN_OPTIONS: print_stacktrace=1
      TSAN_OPTIONS: halt_on_error=1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential cmake ninja-build clang git python3
          # Build nsync from source (fast, small)
          git clone --depth 1 https://github.com/google/nsync.git
          cmake -S nsync -B nsync/build -DCMAKE_BUILD_TYPE=Release
          cmake --build nsync/build -j
          sudo cmake --install nsync/build

      - name: Install dependencies (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          brew update
          brew upgrade
          # Prefer Homebrew package if available; fallback to source build
          if brew info nsync >/dev/null 2>&1; then
            brew install nsync || true
          else
            git clone --depth 1 https://github.com/google/nsync.git
            cmake -S nsync -B nsync/build -DCMAKE_BUILD_TYPE=Release
            cmake --build nsync/build -j
            sudo cmake --install nsync/build
          fi

      - name: Configure (sanitizers)
        working-directory: libgo
        run: |
          case "${{ matrix.sanitizer }}" in
            asan_ubsan)
              cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DGO_ENABLE_ASAN=ON -DGO_ENABLE_UBSAN=ON -DGO_WARNINGS_AS_ERRORS=ON
              ;;
            tsan)
              cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DGO_ENABLE_TSAN=ON -DGO_WARNINGS_AS_ERRORS=ON
              ;;
          esac

      - name: Build
        working-directory: libgo
        run: cmake --build build -j

      - name: Test
        working-directory: libgo
        run: ctest --test-dir build --output-on-failure

      - name: Archive logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.sanitizer }}-logs
          path: |
            libgo/build/Testing/Temporary/*
            libgo/build/Testing/*/LastTest.log
            libgo/build/CTestTestfile.cmake
          if-no-files-found: ignore
